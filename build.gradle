plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.jetbrains.kotlin.android)
}

tasks.register("prepareKotlinBuildScriptModel"){}

apply plugin: 'maven-publish'

android {
    namespace 'com.engage.emadsdk'
    compileSdk 34

    defaultConfig {
        minSdk 24

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    libraryVariants.configureEach { variant ->
        variant.outputs.all { output ->
            if (outputFile != null && outputFile.name.endsWith('.aar')) {
                def fileName = "${archivesBaseName}-${variant.name}.aar"
                outputFileName = fileName
            }
        }
    }

}

dependencies {

    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.material
    testImplementation libs.junit
    testImplementation libs.mockito.core
    testImplementation libs.mockito.inline
    testImplementation libs.androidx.core.testing
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core

    // Import Exoplayer
    implementation libs.androidx.media3.ui
    implementation libs.androidx.media3.exoplayer
    implementation libs.androidx.media3.exoplayer.ima

    // Lifecycle
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.lifecycle.common.java8

    // IMA SDK
    implementation libs.interactivemedia

    implementation libs.simple.xml

    implementation libs.okhttp
    implementation libs.android.example

}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs

    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }

    title = null

    options {
        doclet = "com.google.doclava.Doclava"
        docletpath = [file("libs/doclava-1.0.6.jar")]
        noTimestamp = false

        // show only Protected & Public
        memberLevel = JavadocMemberLevel.PROTECTED
    }

}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}


task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.engage.emadsdk'
            artifactId 'emadsdk'
            version '1.0.0'
//            from components.release

            pom {
                name = 'EM TV Ads SDK'
                description = 'A TV Ads SDK for EngageMedia Ads'
//                url = 'http://yourcompany.com/library'

//                licenses {
//                    license {
//                        name = 'The Apache Software License, Version 2.0'
//                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                    }
//                }

                developers {
                    developer {
                        id = 'emtv'
                        name = 'Em TV Developer'
                        email = 'shahar@engagemedia.tv'
                    }
                }

//                scm {
//                    connection = 'scm:git:git://github.com/yourcompany/your-library.git'
//                    developerConnection = 'scm:git:ssh://github.com:yourcompany/your-library.git'
//                    url = 'http://github.com/yourcompany/your-library/'
//                }
            }
        }
    }

    repositories {
        maven {
            // If using a local Maven repository (e.g., Artifactory or Nexus)
            url = uri('http://localhost:8081/repository/maven-releases/')
            credentials {
                username = 'admin'
                password = 'admin123'
            }
        }
        maven { url 'https://jitpack.io' }
    }
}
